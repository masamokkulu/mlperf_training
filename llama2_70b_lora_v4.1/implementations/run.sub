#!/bin/bash

# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#SBATCH --exclusive
#SBATCH --mem=0
#SBATCH -o logs/slurm/%x.%j.out.log
#SBATCH --job-name lama2_70b_lora-pyt

set -eux

echo "PROLOG_START $(date +%s)"

# Vars without defaults
: "${CONT:?CONT not set}"
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${WALLTIME_RUNANDTIME:?WALLTIME_RUNANDTIME not set}"

# Vars with defaults
: "${CHECK_COMPLIANCE:=1}"
: "${MLPERF_RULESET:=4.1.0}"
: "${MLPERF_SYSTEM_NAME:='unknown'}"
: "${MLPERF_SCALE:='unknown'}"
: "${MLPERF_CLUSTER_NAME:='unknown'}"
: "${DGXNGPU:=8}"
: "${NEXP:=1}"
: "${SEED_BASE:=${SEED-$RANDOM}}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CLEAR_CACHES:=1}"
: "${LOGDIR:=./results}"
: "${DROPCACHE_CMD:="sudo /sbin/sysctl vm.drop_caches=3"}"
: "${API_LOG_DIR:=./api_logs}" # apiLog.sh output dir
: "${API_LOGGING:=0}"
: "${ABSLOGDIR:=${PWD}/results}"
: "${POWERCMDDIR:=' '}"
: "${SET_MAXQ_CLK:=0}"
: "${SET_MINEDP_CLK:=0}"
: "${NCCL_TEST:=1}"
: "${NVTX_FLAG:=0}"

# override enroot's (sometimes in-use) randomly chosen ephemeral port.  29500
# is non-ephemeral and not assigned by the IANA.  If 29500 is in use on your
# cluster for some other service, then choose a different non-ephemeral
# unassigned port from
# https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
# or https://svn.nmap.org/nmap/nmap-services.  The range that needs to be
# avoided is the ephemeral port range, returned by `sysctl
# net.ipv4.ip_local_port_range` (32768-61000 by default).
: "${MASTER_PORT:=29500}"
export MASTER_PORT=$MASTER_PORT

if [ "$SLURM_JOB_NUM_NODES" -eq 1 ]; then
    export MASTER_ADDR=127.0.0.1
else
    source get_master_addr.sh
fi

echo "using MASTER_ADDR \"${MASTER_ADDR}\" of list \"${SLURM_JOB_NODELIST}\""

module load singularitypro
echo "Loading singularity ..."

export MODEL_NAME="llama2_70b_lora"
export MODEL_FRAMEWORK="pytorch"
LOGBASE="${DATESTAMP}"
SPREFIX="${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXNNODES}x${DGXNGPU}x${MINIBS}_${DATESTAMP}"
readonly _logfile_base="${LOGDIR}/${DATESTAMP}"
readonly _cont_name="${MODEL_NAME}_${SLURM_JOB_ID}"
readonly _seed_override=${SEED:-}

#_cont_mounts="${DATADIR}:/data:ro,${MODEL}:/ckpt:ro,${LOGDIR}:/results:rw"
#MOUNT_OPTS="-B $work_dir:/workspace/ft-llm -B $work_dir/data/gov_report:/data -B $work_dir/data/model:/ckpt -B $work_dir/logs:/results"
MOUNT_OPTS="-B $work_dir/data/gov_report:/data -B $work_dir/data/model:/ckpt -B $work_dir/logs:/results"
cont_mounts_to_verify="'/data', '/ckpt'"

if [ ${NVTX_FLAG} -gt 0 ]; then
    if [[ "$LOGBASE" == *'_'* ]];then
        LOGBASE="${LOGBASE}_nsys"
    else
        LOGBASE="${SPREFIX}_nsys"
    fi
fi

# Cleanup data index dir
rm -rf "${LOGDIR}/data_index/train" "${LOGDIR}/data_index/val"
mkdir -p "${LOGDIR}/data_index/train" "${LOGDIR}/data_index/val"

if [ "${API_LOGGING:-}" -eq 1 ]; then
    API_LOG_DIR=${API_LOG_DIR}/${MODEL_FRAMEWORK}/${MODEL_NAME}/${DGXSYSTEM}
    mkdir -p ${API_LOG_DIR}
    _cont_mounts="${_cont_mounts},${API_LOG_DIR}:/logs"

    # Create JSON file for cuDNN
    JSON_MODEL_NAME="MLPERF_${MODEL_NAME}_${APILOG_MODEL_NAME}_${MODEL_FRAMEWORK}_train"
    JSON_README_LINK="${README_PREFIX}/${MODEL_NAME}/${MODEL_FRAMEWORK}/README.md"
    JSON_FMT='{model_name: $mn, readme_link: $rl, configs: {($dt): [$bs]}, sweep: {($dt): [$bs]}}'
    JSON_OUTPUT="MLPERF_${MODEL_NAME}_${MODEL_FRAMEWORK}_train.cudnn.json"
    jq -n --indent 4 --arg mn $JSON_MODEL_NAME --arg rl $JSON_README_LINK --arg dt $APILOG_PRECISION --arg bs $BATCHSIZE "$JSON_FMT" > ${API_LOG_DIR}/$JSON_OUTPUT
fi

if [ "${JET:-0}" -eq 1 ]; then
    _cont_mounts="${_cont_mounts},${JET_DIR}:/root/.jet"
fi

# MLPerf vars
MLPERF_HOST_OS=$(srun -N1 -n1 bash <<EOF
    source /etc/os-release
    source /etc/dgx-release || true
    echo "\${PRETTY_NAME} / \${DGX_PRETTY_NAME:-???} \${DGX_OTA_VERSION:-\${DGX_SWBUILD_VERSION:-???}}"
EOF
)
export MLPERF_HOST_OS

# Setup directories
( umask 0002; mkdir -p "${LOGDIR}" )
srun --ntasks="${SLURM_JOB_NUM_NODES}" mkdir -p "${LOGDIR}"

# Setup container
srun -N1 -n1 singularity exec --nv ${CONT} ibv_devinfo --list
srun -N1 -n1 singularity exec --nv ${CONT} nvidia-smi topo -m

echo "NCCL_TEST = ${NCCL_TEST}"
if [[ ${NCCL_TEST} -eq 1 ]]; then
    # (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="$(( SLURM_JOB_NUM_NODES * DGXNGPU ))" --ntasks-per-node="${DGXNGPU}" \
    #      --container-name="${_cont_name}" all_reduce_perf_mpi -b 62M -e 62M -d half
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node="${DGXNGPU}" \
         singularity exec --nv ${CONT} all_reduce_perf_mpi -b 62M -e 62M -d half \
) |& tee "${LOGDIR}/${SPREFIX}_nccl.log"
fi

if [[ "${GET_MOUNT_INFO:-0}" -eq 1 ]]; then
    # (srun --ntasks=1 --ntasks-per-node=1 --container-name="${_cont_name}" \
    #     --container-mounts="${_cont_mounts}"  \
    (srun --ntasks=1 --ntasks-per-node=1 singularity exec --nv \
	${MOUNT_OPTS} ${CONT} \
        python3 -c "from mlperf_common.mountcheck import main; main(${cont_mounts_to_verify})"
    ) |& tee "${LOGDIR}/cont-mount-info.json"
fi

if [[ "${VERIFY_MOUNT:-1}" -eq 1 ]]; then
    # (srun --ntasks="${SLURM_JOB_NUM_NODES}" --ntasks-per-node=1 --container-name="${_cont_name}" \
    #     --container-mounts="${_cont_mounts}"  \
    (srun --ntasks="${SLURM_JOB_NUM_NODES}" --ntasks-per-node=1 \
	singularity exec --nv -B ${MOUNT_OPTS} ${CONT} \
        python3 -c "from mlperf_common.mountcheck import main; main('cont-mount-info.json', check=True)"
    ) |& tee "${LOGDIR}/${SPREFIX}_mountcheck.log"
fi


#GPU power measurements
if [ -f "$POWERCMDDIR/power_monitor.sh"  ]; then
    ( umask 0002; mkdir -p "${ABSLOGDIR}" )
    # Measure GPU power on up to 64 nodes.
    if [ ${SLURM_JOB_NUM_NODES} -gt 64 ]; then
    	( srun --overlap --ntasks=64 bash $POWERCMDDIR/power_monitor.sh ) & 
    else
	    ( srun --overlap --ntasks=${SLURM_JOB_NUM_NODES} bash $POWERCMDDIR/power_monitor.sh ) &
    fi
fi

#Set GPU clocks for MaxQ and MinEDP run
if [[ "${SET_MAXQ_CLK}" == "1" ]] || [[ "${SET_MINEDP_CLK}" == "1" ]]; then
        if [[ "${SET_MAXQ_CLK}" == "1" ]]; then
                GPC_CLK=${MAXQ_CLK}
        fi
        if [[ "${SET_MINEDP_CLK}" == "1" ]]; then
                GPC_CLK=${MINEDP_CLK}
        fi
	srun --ntasks=${SLURM_JOB_NUM_NODES} bash -c "sudo nvidia-smi -lgc ${GPC_CLK}"
fi

#Set the value for nvidia-smi boost-slider --vboost
# if [ ${VBOOST_VALUE:-0} -gt 0 ]; then
# 	srun --ntasks=${SLURM_JOB_NUM_NODES} bash -c "sudo nvidia-smi boost-slider --vboost ${VBOOST_VALUE}"
# fi

echo "PROLOG_STOP $(date +%s)"

for _experiment_index in $(seq 1 "${NEXP}"); do
    echo "EXPERIMENT_START $(date +%s)"

    (
        echo "Beginning trial ${_experiment_index} of ${NEXP}"
        echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST} ${MLPERF_CLUSTER_NAME} ${DGXSYSTEM}"
        echo ":::SYSJSON $(srun --ntasks=1 singularity exec --nv ${CONT} mlperf-sysjson.sh)"
        # srun --ntasks=1 --container-name="${_cont_name}" bash -c 'echo ":::GITCOMMITID ${GIT_COMMIT_ID} ${LAUNCHER_GIT_COMMIT_ID}"'
        srun --ntasks=1 singularity exec --nv ${CONT} bash -c 'echo ":::GITCOMMITID ${GIT_COMMIT_ID} ${LAUNCHER_GIT_COMMIT_ID}"'

        # Clear caches
        # if [ "${CLEAR_CACHES}" -eq 1 ]; then
        #     srun --ntasks="${SLURM_JOB_NUM_NODES}" --mpi="${SLURM_MPI_TYPE:-pmix}" bash -c "echo -n 'Clearing cache on ' && hostname && sync && ${DROPCACHE_CMD}"
        # fi

        # Run experiment
        export SEED=$(($SEED_BASE - 1 + 10#$_experiment_index))
        set +e
        echo "RUNANDTIME_START $(date +%s)"
        # srun -l --mpi="${SLURM_MPI_TYPE:-pmix}" \
        #  --ntasks="$(( SLURM_JOB_NUM_NODES * DGXNGPU ))" \
        #  --ntasks-per-node="${DGXNGPU}" \
        #  --time="${WALLTIME_RUNANDTIME}" \
        #  --container-name="${_cont_name}" \
        #  --container-mounts="${_cont_mounts}" \
        #  --container-env=MASTER_PORT,MASTER_ADDR \
	#   --env SINGULARITYENV_PYTHONUSERBASE=$SINGULARITYENV_PYTHONUSERBASE \
        srun -l --mpi="${SLURM_MPI_TYPE:-pmix}" \
	   --ntasks="$(( SLURM_JOB_NUM_NODES * DGXNGPU ))" \
	   --ntasks-per-node="${DGXNGPU}" \
	   --time="${WALLTIME_RUNANDTIME}" \
	   singularity exec --nv \
	   --env MASTER_PORT=${MASTER_PORT} \
	   --env MASTER_ADDR=${MASTER_ADDR} \
	   ${MOUNT_OPTS} \
	   ${CONT} \
           slurm2pytorch ./run_and_time.sh
        echo "RUNANDTIME_STOP $(date +%s)"
        set -e

    ) |& tee "${_logfile_base}_${_experiment_index}.log"

    # compliance checker
    if [ "${CHECK_COMPLIANCE}" -eq 1 ]; then
      # srun --ntasks=1 --nodes=1 --container-name="${_cont_name}" \
      #      --container-mounts="$(realpath ${LOGDIR}):/results"   \
      #      --container-workdir="/results"                        \
      srun -N1 -n1 singularity exec --nv \
           ${MOUNT_OPTS} \
           --pwd /results \
           ${CONT} \
           python3 -m mlperf_logging.compliance_checker --usage training \
           --ruleset "${MLPERF_RULESET}"                                 \
           --log_output "/results/compliance_${DATESTAMP}.out"           \
           "/results/${LOGBASE}_${_experiment_index}.log" \
     || true
    fi

    if [ "${JET:-0}" -eq 1 ]; then
      _JET_CREATE=${JET_CREATE:-}" --data workload.spec.nodes=${DGXNNODES} --data workload.spec.name=${MODEL_NAME} --data workload.spec.framework=${MODEL_FRAMEWORK} --data workload.spec.scale=${MLPERF_SCALE} --data workload.spec.platform=${DGXSYSTEM} --data workload.key=${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXSYSTEM} --data workload.spec.datestamp=${DATESTAMP} --data workload.spec.experiment_index=${_experiment_index} --mllogger "
      # srun -N1 -n1 --container-name="${_cont_name}" --container-mounts="${_cont_mounts}" --container-remap-root bash -c "${_JET_CREATE} /results/${DATESTAMP}_${_experiment_index}.log --asset /results/slurm-${SLURM_JOB_ID}.out --data source_image.name=${CONT} --data slurm.job=${SLURM_JOB_ID} && ${JET_UPLOAD}"
      srun -N1 -n1  singularity exec --nv-${MOUNT_OPTS} ${CONT} bash -c "${_JET_CREATE} /results/${DATESTAMP}_${_experiment_index}.log --asset /results/slurm-${SLURM_JOB_ID}.out --data source_image.name=${CONT} --data slurm.job=${SLURM_JOB_ID} && ${JET_UPLOAD}"
    fi

    echo "EXPERIMENT_STOP $(date +%s)"
done
